!script {{
  --/|Script Name : 5E Dragonborn Breath
  --/|Version     : 1.5
  --/|Requires SC : 1.4.2+ when used with token-mod or alterbars. 1.5.2+ standalone
  --/|Author      : Kurt Jaegers

  --/|Description : Handles a dragonborn's draconic breath weapon. IF your character was created with the 
  --/|              charactermancer, you don't need to do anything. If it wasn't, you'll need to add a 
  --/|              "draconicheritage" attribute to the character with the dragon type (black, red, green, etc.)
  --/|              listed in it. If all else fails, a black dragon's acid breath will be assumed.
  --/|
  --/|              You can optionally have damage applied to impacted tokens. The script defaults to using
  --/|              TokenMod to update Bar 3. These can be changed by altering the settings below.
  
  --/|Set this to either "scriptcards", "token-mod", "alterbars", or anything else to not apply damage
  --&damageApplyScript|scriptcards

  --/|Set this to the bar number you use to track hit points
  --&hitPointsBar|3

  --/|Set this variable to the (case sensitive) name of a Jukebox track to play when the spell is cast
  --&SoundEffectTrack|Spell_FireBurst

  --/|Set this to a list of layers to a semicolon separated check for tokens on. By default, objects and gmlayer are checked.
  --/|possible values are objects, gmlayer, and map, so to check all three, use "objects;gmlayer;map"
  --&checkLayers|objects;gmlayer

  --/|===================== There are no customization options below this line =====================
  
  --/|Set some default values in case we can't determine a dragon heritage
  --&damageType|Acid
  --&damageShape|Line
  --&breathSaveType|Dexterity
  --&breathEffect|burn-acid

  --#sourcetoken|@{selected|token_id}

  --/|Set up scaling values to handle non-1.0 snapping increment grids.
  --#activepage|[*s:t-_pageid]
  --=scaler|[*P:snapping_increment] * 70
  --=halfscaler|[$scaler] \ 2
  --=doublescaler|[$scaler] * 2
  --=triplescaler|[$scaler] * 3

  --/|Damage for dragonborn breath starts at 2d6 at first level
  --&damageDice|2
  --&damageSides|6

  --/|Save DC is 8 + Constitution Modifier + Proficiency Bonus
  --=breathSaveDCTemp|8 + [*S:constitution_mod] + [*S:pb]
  --&breathSaveDC|[$breathSaveDCTemp.Raw]

  --/|Damage scales based on the character's level (2d6 at 1st, 3d6 at 4th, 4d6 at 11th, and 5d6 at 16th)
  --?[*S:level] -gt 6|&damageDice;3
  --?[*S:level] -gt 11|&damageDice;4
  --?[*S:level] -gt 16|&damageDice;5
  
  --/|Attempts to determine the dragon type, via either the repeating traits list or an attribute on the character (see above)
  --&work|Unknown

  --/|Start by trying to find a Trait entry named "Breath Weapon" and break down the description
  --RFind|[*S:character_id];Breath Weapon;repeating_traits;name
  --?"[*R:name]" -ne "NoRepeatingAttributeLoaded"|[
  --~work|string;before; draconic ;[*R:description]
  --~work|string;after;. Your ;[&work]
  --~work|string;tolowercase;[&work]
  --]|
  --?[&work] -ne "Unknown"|doneDetermineType

  --/|If a trait wasn't found, look for a "draconicheritage" attribute on the character
  --?"X[*S:draconicheritage]X" -eq "XX"|assumeBlackDragon
  --~work|string;tolowercase;[*S:draconicheritage]
  --^doneDetermineType|

  --/|Both lookup methods failed. Fall back to the default (black) dragon
  --:assumeBlackDragon|
  --&work|black

  --:doneDetermineType|

  --/|Use the determined dragon type to set the parameters used for the dragon breath, including damage type, damage shape, saving throw, and visual effect
  --C[&work]|black:&damageType;Acid|blue:&damageType;Lightning|brass:&damageType;Fire|bronze:&damageType;Lightning|copper:&damageType;Acid|gold:&damageType;Fire|green:&damageType;Poison|red:&damageType;Fire|silver:&damageType;Cold|white:&damageType;Cold
  --C[&work]|black:&breathEffect;burn-acid|blue:&breathEffect;burn-holy|brass:&breathEffect;burn-Fire|bronze:&breathEffect;burn-holy|copper:&breathEffect;burn-acid|gold:&breathEffect;burn-fire|green:&breathEffect;burn-slime|red:&breathEffect;burn-fire|silver:&breathEffect;burn-frost|white:&breathEffect;burn-frost
  --&damageShape|Line
  --C[&work]|gold:&damageShape;Cone|green:&damageShape;Cone|red:&damageShape;Cone|silver:&damageShape;Cone|white:&damageShape;Cone
  --&breathSaveType|Dexterity
  --C[&work]|green:&breathSaveType;Constitution|silver:&breathSaveType;Constitution|white:&breathSaveType;Constitution

  --~saveAttributeName|string;tolowercase;[&breathSaveType]_save_bonus

  --/|Set the card headers based on the determine dragon type and save information
  --#leftsub|Save DC [&breathSaveDC]
  --#rightsub|Save Type [&breathSaveType]
  --#title|[&damageType] Dragonborn Breath

  --/|Prompt for a direction for the breath. The damageDirection variable will end up containting something like "LU" for Line Up, "CDR" for Cone Down Right, etc.
  --&direction|?{Direction|&#x2B06; (UP),U|&#x2197; (UP-RIGHT),UR|&#x27A1; (RIGHT),R|&#x2198; (DOWN-RIGHT),DR|&#x2B07; (DOWN),D|&#x2199; (DOWN-LEFT),DL|&#x2B05; (LEFT),L|&#x2196 (UP-LEFT);,UL|}
  --?[&damageShape] -eq "Cone"|&damageDirection;C[&direction]
  --?[&damageShape] -eq "Line"|&damageDirection;L[&direction]
  
  --/|Define arrays listing the impacted squares relative to the caster at 0,0
  --~|array;define;CU;0,-1;0,-2;-1,-2;-1,-3;0,-3;1,-3
  --~|array;define;CD;0,1;0,2;1,2;-1,3;0,3;1,3
  --~|array;define;CR;1,0;2,0;2,-1;3,-1;3,0;3,1
  --~|array;define;CL;-1,0;-2,0;-2,-1;-3,-1;-3,0;-3,1
  --~|array;define;CUR;1,-1;1,-2;1,-3;2,-1;2,-2;3,-1
  --~|array;define;CDR;1,1;1,2;1,3;2,1;2,2;3,1
  --~|array;define;CUL;-1,-1;-1,-2;-1,-3;-2,-1;-2,-2;-3,-1
  --~|array;define;CDL;-1,1;-1,2;-1,3;-2,1;-2,2;-3,1
  --~|array;define;LU;0,-1;0,-2;0,-3;0,-4;0,-5;0,-6
  --~|array;define;LD;0,1;0,2;0,3;0,4;0,5;0,6
  --~|array;define;LL;-1,0;-2,0;-3,0;-4,0;-5,0;-6,0
  --~|array;define;LR;1,0;2,0;3,0;4,0;5,0;6,0
  --~|array;define;LUL;-1,-1;-2,-2;-3,-3;-4,-4;-5,-5;-6,-6
  --~|array;define;LUR;1,-1;2,-2;3,-3;4,-4;5,-5;6,-6
  --~|array;define;LDL;-1,1;-2,2;-3,3;-4,4;-5,5;-6,6
  --~|array;define;LDR;1,1;2,2;3,3;4,4;5,5;6,6

  --/|Get all of the character tokens on the page so we can cache their positions
  --~|array;pagetokens;alltokens;@{selected|token_id};char
  -->createTokenLookup|

  --/|Calculate damage
  --=Damage|[&damageSides]d[&damageDice]
  --=HalfDamage|[$Damage.Total] \ 2
  --=DoubleDamage|[$Damage.Total] * 2
  --=QuarterDamage|[$Damage.Total] \ 4

  --/|Determine damage subroutine. Start by assuming we aren't going to apply damage
  --&damageRoutine|DontApplyDamage
  --?[&damageApplyScript] -eq "scriptcards"|&damageRoutine;ApplyDamageScriptCards
  --?[&damageApplyScript] -eq "token-mod"|&damageRoutine;ApplyDamageTokenmod
  --?[&damageApplyScript] -eq "alterbars"|&damageRoutine;ApplyDamageAlterbars

  --/|Since we want to be able to hover over a roll and see the dice details, output the rolled damage at the
  --/|top of the card. If all critters make their save, the half damage roll won't contain the details.
  --+|[c][b]Damage Roll: [/b][$Damage][/c]
  --+|&nbsp;

  --a|[&SoundEffectTrack]
  
  --/|Create an array to hold the tokens that within the impacted squares.
  --~|array;define;tokensHit;
  
  --/|Call the "checkForTokenHits" subroutine, passing the visual effect that will be spawned in each square.
  --/|The tokensHit array will be updated with a list of all of the tokens that should be impacted by the breath.
  -->checkForTokenHits|[&breathEffect]

  --/|The first item in the array will be a blank dummy item, so remove it.
  --~|array;removeat;tokensHit;0
  
  --/|Loop through the tokensHit tokens and roll saves for each one and apply damage
  --~tokenid|array;getfirst;tokensHit
  --?[&tokenid] -eq ArrayError|endOutput
  --:loopDisplay|
  --=SaveRoll|1d20 + [*[&tokenid]:[&saveAttributeName]]

  --/|Compare the save roll to the save DC and either apply full or half damage
  --?"[*[&tokenid]:npc_immunities]" -inc "[&damageType]"|Immune
  --?"[*[&tokenid]:npc_resistances]" -inc "[&damageType]"|Resistant
  --?"[*[&tokenid]:npc_vulnerabilities]" -inc "[&damageType]"|Vulnerable
  --?[$SaveRoll.Total] -lt [&breathSaveDC]|>[&damageRoutine];[&tokenid];[&hitPointsBar];-[$Damage.Total]|>[&damageRoutine];[&tokenid];[&hitPointsBar];-[$HalfDamage.Total]
  --?[$SaveRoll.Total] -ge [&breathSaveDC]|madeSave

  --/|Here are various damage applications if the creature is immune, resistant, or vulnerable. In some cases, we will reuse output lines,
  --/|for example, a resistant creature that fails its save will jump to "madeSave", since that is the correct damage amount. (half), while
  --/|a vulnerable creature that makes its save will jump to "FailedSave" since that will be normal damage.

  --/|Output a line for a failed saving throw (we will also jump here for a vulnerable creature that MAKES its save)
  --:FailedSave|
  --+[*[&tokenid]:t-name]:|Save [$SaveRoll] [r][$Damage] [&damageType][/r]
  --^afterSave|
  
  --:Immune|
  --+[*[&tokenid]:t-name]:|is not effected by the spell!
  --^afterSave|

  --:Resistant|
  --?[$SaveRoll.Total] -lt @{selected|spell_save_dc}|>[&damageRoutine];[&tokenid];3;-[$HalfDamage.Total]|>[&damageRoutine];[&tokenid];3;-[$QuarterDamage.Total]
  --?[$SaveRoll.Total] -lt @{selected|spell_save_dc}|madeSave
  --+[*[&tokenid]:t-name]:|Save [$SaveRoll] [r][$QuarterDamage] [&damageType][/r]
  --^afterSave|

  --:Vulnerable|
  --?[$SaveRoll.Total] -lt @{selected|spell_save_dc}|>[&damageRoutine];[&tokenid];[&hitPointsBar];-[$DoubleDamage.Total]|>[&damageRoutine];[&tokenid];[&hitPointsBar];-[$Damage.Total]
  --?[$SaveRoll.Total] -ge @{selected|spell_save_dc}|FailedSave
  --+[*[&tokenid]:t-name]:|Save [$SaveRoll] [r][$DoubleDamage] [&damageType][/r]
  --^afterSave|

  --/|Output a line for a successful saving throw
  --:madeSave|
  --+[*[&tokenid]:t-name]:|Save [$SaveRoll] [r][$HalfDamage] [&damageType][/r]
  --:afterSave|

  --/|Continue on to the next hit token
  --~tokenid|array;getnext;tokensHit
  --?[&tokenid] -ne ArrayError|loopDisplay

  --:endOutput|
  
  --X|

  --/|===================== Subroutines =====================
  
  --/|There are four "ApplyDamage" subroutines - one for scriptcards built-in functions, one for alterbars, one for token-mod, and one to not apply damage
  
  --/|Apply damage via ScriptCards' built-in object modification function (new in ScriptCards 1.5.0)
  --:ApplyDamageScriptCards|Parameters are tokenid;bar#;amount
  --!t:[%1%]|bar[%2%]_value:+=[%3%]
  --<|

  --/|Token-Mod doesn't have a "set to a relative number", so we get the current bar value, subtract thedamage amount
  --/|make sure it doesn't fall below 0, and set the amount back into the bar.
  --:ApplyDamageTokenmod|Parameters are tokenid;bar#;amount
  --=applyValue|[%3%]
  --?[$applyValue] -lt 0|=applyValue;[$applyValue] {NEG}
  --=newValue|[*[%1%]:t-bar[%2%]_value] - [$applyValue]
  --?[$newValue] -lt 0|=newValue;0
  --@token-mod|_ignore-selected _ids [%1%] _set bar[%2%]_value|[$newValue.Raw]
  --<| 
  
  --/|AlterBars supports relative values for the amount parameter, so we just pass it the value with a "-" in front of it.
  --:ApplyDamageAlterbars|Parameters are tokenid;bar#;amount
  --=applyValue|[%3%]
  --?[$applyValue] -lt 0|=applyValue;[$applyValue] {NEG}
  --@alter|_target|[%1%] _bar|[%2%] _amount|-[%3%] _show|none
  --<|

  --/|Just a dummy routine that doesn't do anything, but it is easier to do it this way than adding logic to see if we are
  --/|skipping applying damage in the main routine.
  --:DontApplyDamage|
  --<|
  
  --/|Runs through the array named after the damageDirection variable (LU, CDR, etc.) and identify tokens that were
  --/|in those squares. Also accepts a parameter for a visual effect to play in each square (token hit or not)
  --:checkForTokenHits|parameter is vfx descriptor

  --/|Get the square location of the "caster"
  --=baseX|[*S:t-left] - 1 \ [$scaler]
  --=baseY|[*S:t-top] - 1 \ [$scaler]
  --~offset|array;getfirst;[&damageDirection]
  --:checkTokenLoop|
  --?"[&offset]" -eq "ArrayError"|endCheckForTokenHits

  --/|Use the relative offsets to determine an absolute X/Y position
  --~split|string;split;,;[&offset]
  --=thisX|[$baseX.Raw] + [&split1]
  --=thisY|[$baseY.Raw] + [&split2]
  --/|IF we passed a visual effect specifier in %1%, create a point VFX in the square
  --?"X[%1%]X" -ne "XX" |[
    --=VX|[$thisX] * [$scaler] + [$halfscaler]
    --=VY|[$thisY] * [$scaler] + [$halfscaler]
    --vpoint|[$VX] [$VY] [%1%]
  --]|
  --/|Call "checkTokens" to see if there are any tokens in this square that need to be added
  --/|to the hit tokens array.
  -->checkTokens|[$thisX.Raw];[$thisY.Raw]
  --~offset|array;getnext;[&damageDirection]
  --^checkTokenLoop|
  --:endCheckForTokenHits|
  --<|
    
  --/|Reads the variables created by createTokenLookup to find any tokens that occupy a given space. The variables are
  --/|named "tokX-Y" where X and Y are the absolute coordinates of the space, and contain an ! separated list of the
  --/|tokens in that square
  --:checkTokens|x;y
  --?"X[&tok[%1%]-[%2%]]X" -ne "XX"|[
  --~split|string;split;!;[&tok[%1%]-[%2%]]

  --/|Loop through each token listed in the variable
  --%P|1;[$splitCount.Total];1
  --=var|split[&P]
  --?"X[&[$var.RollText]]X" -eq "XX"|%
  --~exists|array;indexof;tokensHit;[&[$var.RollText]]
  --?[&exists] -ne ArrayError|skipAdd
  --?[&[$var.RollText]] -eq ArrayError|skipAdd
  --~|array;add;tokensHit;[&[$var.RollText]]
  --:skipAdd|
  --%|
  --<|
  
  --/|Creates a series of string variables with names like 'tok12-15' which represent the various squares that are
  --/|occupied by tokens on the page. Handle 1x1, 2x2, and 3x3 tokens by simply adding extra squares in the appropriate
  --/|pattern around the center point location. The result is that if there are two tokens at 12,15, the tok12-15 string
  --/|will contain something like "-asln34njfn2nafd!-sdnfklaserfs" (IDs separated by exclamation points) that we can use to
  --/|quickly evaluate hits by essentially asking "what is in square 12x15" by just reading the variable.
  --:createTokenLookup|
  --~tokenid|array;getfirst;alltokens
  --:tokenSetupLoop|
    --?[&tokenid] -eq ArrayError|endSetupLoop
    --?[&checkLayers] -ninc [*[&tokenid]:t-layer]|skipThisToken
    --=tLeft|[*[&tokenid]:t-left] - 1 \ [$scaler]
    --=tTop|[*[&tokenid]:t-top] - 1 \ [$scaler]
    --=tWidth|[*[&tokenid]:t-width]
    --?[$tWidth] -eq [$scaler]|[ 
      --&tok[$tLeft.Raw]-[$tTop.Raw]|+[&tokenid]!
      --/+[*[&tokenid]:character_name]|At [$tLeft.Raw],[$tTop.Raw] : [&tok[$tLeft.Raw.Total]-[$tTop.Raw.Total]]
    --]|
  --?[$tWidth] -eq [$doublescaler]|[ 
    --=NX|[$tLeft.Raw] + 1
    --=NY|[$tTop.Raw] + 1
    --&tok[$tLeft.Raw]-[$tTop.Raw]|+[&tokenid]!
    --&tok[$tLeft.Raw]-[$NY]|+[&tokenid]!
    --&tok[$NX]-[$tTop.Raw]|+[&tokenid]!
    --&tok[$NX]-[$NY]|+[&tokenid]!
  --]|
  --?[$tWidth] -eq [$triplescaler]|[ 
    --=PX|[$tLeft.Raw] - 1
    --=PY|[$tTop.Raw] - 1
    --=NX|[$tLeft.Raw] + 1
    --=NY|[$tTop.Raw] + 1
      --&tok[$tLeft.Raw]-[$tTop.Raw]|+[&tokenid]!
      --&tok[$PX.Raw]-[$PY.Raw]|+[&tokenid]!
    --&tok[$tLeft.Raw]-[$PY.Raw]|+[&tokenid]!
    --&tok[$NX]-[$PY.Raw]|+[&tokenid]!
      --&tok[$PX.Raw]-[$tTop.Raw]|+[&tokenid]!
    --&tok[$NX]-[$tTop.Raw]|+[&tokenid]!
      --&tok[$PX.Raw]-[$NY]|+[&tokenid]!
      --&tok[$tLeft.Raw]-[$NY]|+[&tokenid]!
      --&tok[$NX]-[$NY]|+[&tokenid]!
  --]|
  --:skipThisToken|
  --~tokenid|array;getnext;alltokens
  --^tokenSetupLoop|
  --:endSetupLoop|
  --<|
}}