ScriptCards Roll20 API Script Changelog

v 1.6.5  - Changed the referencing previx for settings from # to ~, so [~title] will now refence the card's title setting. # was clashing with formatting.
           New setting: 

v 1.6.4b - The turnorder;addcustom function will now (optionally) accept an additional parameter that will be placed in the "formula" value to create
           custom entries that perform a calculation at the beginning of each round.

v 1.6.4a - Reentrant/resumed cards will now update the SC_SelectedTokens array with the tokens that are selected with the script resumes/reenters.

v 1.6.4  - Added the system string variable 'ScriptCards_Version' (ie, [&ScriptCards_Version]) which will match the current version number. Of course,
           for versions prior to 1.6.4, this will return an empty string.
           Added the pre-defined array SC_SelectedTokens, which will be populated with the token IDs of any tokens selected when the script is run.
           Fixed the turnorder;replacetoken function to properly take the turn order update into account. I had previously only fixed turnorder;addtoken

v 1.6.3  - Bug fix for Deadlands-style rolling (post dice parser rewrite, it was adding all the dice together)

v 1.6.2  - Bug fix for rollable table calls ([T#table-name]) in --= statements not functioning. The modified regex for flavor text, (like [STR]) was
           being checked before the roll table syntax and overriding them.

v 1.6.1  - Removed the lookup in the available token attributes table. All current and future token attributes can now be accessed with the t- syntax.

v 1.6.0  - Added the [#settingname] replacable content reference. This can be used to read back any of the settings supported by ScriptCards. For
           example, [#title] will be replaced with the current value of the "title" setting.
           Added 10 new settings (usersetting0 thru usersetting9). These settings are not used by ScriptCards itself, but they are stored when using
           the --Ssettings command and can be reloaded with --Lsettings and provide user configurable storage that can be stored along with named
           setting sets.
           Minor display tweaks to spacing from the output of the dice roll parser. Added code to accomodate the undocumented Roll20 change to the
           turnorder system. The turnorder functions should once again behave as expected.

v 1.5.8  - Modification to the way repeating attributes are filled in to strip @{ and } from sub references so the actual name of the sub attribute
           is returned, which can then be used within a script.

v 1.5.7  - Minor tweak to the roll parser to allow raw numbers to have a # sign after them (it just gets ignored).

v 1.5.6  - Update to disable recursive deferencing of nested attributes until that code can be rewritten, as it was causing a performance issue when
           dealing with repeating row items.

v 1.5.4  - EXPERIMENTAL - Complete rewrite of the roll parsing system, improving the flexibility of the roll parser and correcting a few bugs. Among 
           the improvements are things like being able to add a # on the end of a dice specifier to prevent highlighting based on that die. For example, 
           if you have a 5E to hit roll of "1d20 + 1d4 [Bless] + 5 [Str] + 2 [Prof]" the old system would highlight the roll as a crit if either the d20 
           was a 20 or the d4 was a 4, and the same for a fumble. Now, appending # to any specifier prevents that roll from contributing to the highlight, 
           so "1d20 + 1d4# [Bless] +5 [Str] + 2 [Prof]" will only highlight the roll based off of the d20 roll and not the d4. This update also removes 
           case sensitivity from roll specifiers, doesn't sort the rolls when using kh or kl modifiers, and marks removed rolls with [x#x] (where # is 
           the number that was on the die that got eliminated), and cuts nearly 240 lines out of the code.

v 1.5.3  - Updated the Wild Die support to color-code based on the Wild Die. Red=1 rolled on first die, Green=Ace rolled on first die, yellow for any other 
           value on the wild die.

v 1.5.2  - Added the --a statement, which will play a jukebox track (specified by the Content of the statement). No external APIs are needed for this
           statement to function. Example:
             --a|SwordHitSound
           Tracks need to exist in your Roll20 jukebox, and the name of the track is case senstivie. If the track does not exist in your game, a warning
           message will be sent to the API console log.

v 1.5.1  - Added support for wild die rolling, signified by a W after the side sides. Optionally, can include "S" to drop an initial 1 on the wild die,
           and/or a "X" to drop the highest die rolled if the Wild die is a 1. For example:
           4d6W - Roll 3d6 and 1d6 as a wild die. If the Wild Die acts as an exploding die, rerolling and increasing the total for every 6 rolled.
           4d6WS - As above, but if the Wild Die's first roll is a 1, it will be treated as a 0.
           4d6WX - As above, but if the Wild Die's first roll is a 1, it will replace the highest die among the 3d6.
           4D6WSX - As above, but if the Wild Die's first roll is a 1, it will be treated as a 0 and the highest die among the 3d6 will be eliminated.

v 1.5.0  - Object modification support is now available in ScriptCards. As of 1.5.0, you can use the --! command to modify object properties in the game. 
           This may help reduce the reliance on the --@ command to run other API commands to modify token/character values. The biggest benefit of this is
           that the changes happen as the script is processing, so the new values are available right away. 
           
           The format of the command is:
           --!<objectType>:<objectId>|setting:value|setting:value|setting:value...
           objectType can be one of "t" for token, "c" for character, or "a" for character attribute
           objectId can be a token id or a character id (or "S"/"T" for the Source/Target token/char defined with --#sourcetoken and --#targettoken)
           settings and value pairs can be chained in a single statement separated by | to impact more than one property/attribute with a single line

           Values can be prefixed with += or -= to add/subtract from the current value (no bounds checking is done). Using [*X] notation, the updated
           values can be read immediately. Using += or -= on non-numeric data will simply result in a string append.

           For "a" types, setting names can be prefixed with a ! to create the attribute if it doesn't exist, and postfixed with ^ to set the max
           value instead of the current value.

           Note that there are VERY few attributes associated with a character object, and there are likely few cases where you would want to set anything
           on the character object, but it *is* still possible.
           
           Examples:
             Set the value of bar1_value for the selected token to 5
             --!t:@{selected|token_id}|bar1_value:5

             Add 1 to the bar3_value for the selected token
             --!t:@{selected|token_id}|bar3_value:+=1

             Set bar2_value to 5 and bar2_max to 10 for the selecte token
             --!t:@{selected|token_id}|bar2_value:5|bar2_max:10

             For the character the selected token represents, set "dndstying" attribute on, set "size" to enormous, and set "attitude" to epic. The 
             attitude attribute will be created if it doesn't exist on the character already. The same is not true for dndstying and size:
             --!a:@{selected|token_id}|dndstyling:on|size:enormous|!attitude:epic

             Adds 50 to the npc_xp attribute for the character represented by the selected token, displaying the value before and after the update:
             !script {{
               --+XP|[*@{selected|token_id}:npc_xp]
               --!a:@{selected|token_id}|npc_xp:+=50
               --+XP|[*@{selected|token_id}:npc_xp]
             }}

v 1.4.12 - Added three new roll modifiers: {MAX:X}, {MIN:X}, and {CLAMP:X:Y}. For MAX, the current value of the roll will be reduced to X if it is
           greater than X. For MIN, the current value of the roll will be increased to X if it is lower than X. CLAMP will ensure that the value is
           between the X and Y value (inclusive). X is the smallest allowed value and Y is the largest.
           Corrected an extraneous debug message displayed when making API calls.

v 1.4.11 - Extended the {ROUND} roll modifier to accept a precision level (ie, {ROUND:2} will round the current value to 2 decimal places). The maximum
           supported precision level is 6.

v 1.4.10 - Added function array;numericsort. Same as the array;sort function, except it sorts numerically instead of alphabetically.

v 1.4.9a - Minor tweak to visual style of hover-over text for Fudge dice.

v 1.4.9  - Added support for Fudge dice rolling (XdF) with values of "-", " ", and "+".

v 1.4.8  - Added the ability to set button colors (text and background) inline using [button:#aabbcc:#ddeeff]. The first set of color codes is the text
           color, and the second is the background color. It is not possible to set the background color without setting the text color. Either three or
           six digits can be used for the color codes. At this time, color names are not supported.

v 1.4.7  - Added XdY!h and XdY!l roll formulas to support Deadlands-style rolls. This notation means roll dY X times, with exploding dice on accessing
           (the max value on the die) and keep either the highest (h) or lowest (l) result.

v 1.4.6  - Corrected sandbox crash introduced in 1.4.5 (findObj vs findObjs)... *sigh*
           Added support for AirBag Crash Handler API Script (if installed)

v 1.4.5  - Added deferral character support for get and set Meta APIs. "get" or "set" followed by the deferral character (default ^) and a . will
           be replaced with "get.", so "get^.mule" becomes "get.mule" when the --@ call is made. Currently multiple deferral characters are not
           supported (ie, get^^.) but I can look to add that support if necessary.

v 1.4.4  - Updated distance calculations to take page scale (snapping_increment) into account
         - Added setting options for rollhilightcolornormal, rollhilightcolorcrit, rollhilightcolorfumble, and rollhilightcolorboth to allow the
           color of the box around rolls to be customized.

v 1.4.3  - Integer (rounded) division was only valid when using constants as the divisior. For other types of divisors the integer division
           operator was being ignored. This has been fixed.
         - Removed some extraneous debug console logging.
         - Added more detail to the missing label error message that gets logged to the console to help identify the problematic line.

v 1.4.2  - Added several additional roll modifiers, including {SIN}, {COS}, {TAN}, {ASIN}, {ACOS}, {ATAN}, {SQUARE}, {CUBEROOT}, {CUBE}
         - Added setting (--#) called "rollhilightlineheight" which can be used to set the size of the roll hilight box. This is useful if you
           have increased the lineheight setting and want the hilight box to expand as well.
         - Fixed the incorrect handling of negative numbers in roll parsing for operations other than addition (which just became subtraction :))

v 1.4.1  - Added math/sqrt function and {SQRT} roll modifier.
         - Fixed abs, min, and max functions that got broken at some point.
         - Fixed a potential sandbox crash if incorrect/missing parameters were passed to replaceVariableContent

v 1.4.0  - (Notes cover 1.4.0 thru 1.4.0e)
         - Switched to all GitHub based distribution - The GISTs will no longer be updated
         - Added code to clean HTML out of button captions to prevent non-working buttons
         - New settings (--#) to support emote fonts: emotefont, emotefontweight, emotefontsize, emotefontcolor
         - Added option parameter to the array/pagetokens function to specify "all", "char", "pc", "npc", or "graphic" to filter returned tokens
         - Added array/sort function
         - Added support for t-lightcolor token attribute
         - Fixed a bug in the Roll Parser that would prevent it from rolling on rollable tables with "-" in the name.
         - Cleaned up spacing in the script (JSherwood)
         - The roll parser now treats numbers in parenthesis as just plain numbers (JSherwood)

v 1.3.9  - (Notes cover 1.3.9 thru 1.3.9c)
         - Added math/angle function to get the angle between two tokens
         - Rewrote the repeating function code to vastly speed up dealing with repeating sections
         - Added array/setatindex function
         - Rewrote [hr] replacement code to be more visually friendly.
         - Added system/findability function to return the object id reference of an ability on a character
         - Added setting (--#) for titlefontshadow

v 1.3.8  - Bug fixes for & variable references and use of non-existant variable names
         - Added system/date/getraw function
         - Added support for settings name aliases for nominmaxhilight/nominmaxhighlight

v 1.3.7  - New Background Image Settings: "bodybackgroundimage", "evenrowbackgroundimage", "oddrowbackgroundimage" and "buttonbackgroundimage". Setting body, even, or odd 
           to anything will result in the colors for those items (both for body, odd for odd, and even for even) being set to #00000000 (transparent) automatically, so if 
           you want some color to overlay the background image, you'll need to set the appropriate color after setting the background image.
         - The buttontextcolor setting can how accept named colors instead of just hex codes.
         - Added system/dumpvariables function for debugging scripts
         - Bug Fix: Corrected a bug that could (in very rare circumstances) cause unexpected behavior when setting the activepage setting.
         - Bug Fix: Tokens that don't represent characters can now have their properties retrieved with t- notation.

v 1.3.6  - (Notes cover 1.3.6 thru 1.3.6b)
         - The buttontextcolor has been modified to accept either hex color codes or named colors.
         - Tweaked regex expression for variable substitution that supports extended characters (accented, etc.)
         - If you save a card setting list (with --ssettings) and name it "Default" (case sensitive) it will be loaded at the start of every script. You can always load 
           another set (which will be merged with Default) or remove the "Default" set to alter this behavior.
         - Bug Fix: The nominmaxhighlight "fix" from 1.3.5 broke roll highlighting completely. It is repaired now.
         - New Setting: norollhighlight. If set to a value other than the default ("0"), will not place any highlight box around rolls generated while the setting is active. 
           This will still add a tooltop, and can be used when you wish to pass the roll to something else without the yellow/green/blue/red box around the roll.
         - New Setting: titlecardbackgroundimage. Default is empty. If set, the value will be applied to the css "background-image" tag for the title card. This should be a 
           full CSS specifier, like "url(https://mywebsite.domain/path/to/image.png)".
         - New Setting: titlecardgradient. If not "0", will apply a gradient overlay to the title card background color. Default is no gradient. NOTE: This setting actually 
           overrides the titlecardbackground setting, and the two cannot be used together. You can either have a gradient or have a background image.

v 1.3.5  - Bug Fix: Restored functionality to the "nominmaxhilight" setting.
         - New readsetting sub-function: This function is part of the "system" function group, and allows you to retrieve the current value of a ScriptCards setting as a string
         - New findtoken Sub-function: Added the "findtoken" subfunction to turn order, which will return the initiative tracker value of the indicated token
         - New Settings: Added two new settings (locale and timezone) to support the date functions below.
         - New system/date functions: Added the "date" sub-function category with three options: "getdatetime", "getdate" and "gettime". These functions utilize the "timezone" 
           and "locale" settings to return localized time. Note that the locale setting currently has no effect, as this does not appear to be active/enabled in the Roll20 
           javascript engine - but timezone does work properly.

v 1.3.1  - Behavior Change: Rewrote all content substitution code as a single function that works from the innermost set of references outward, so something like  &wow[$count[&suffix]]] 
           will process [&suffix] first, then [$countX] where X is the result of [&suffix] and finally [&wow1] where 1 is the result of [$countX]. This makes the language more logical 
           and variable resolution more deterministic. It is also a huge performance improvement, since the way variables were replaced previously was highly non-optimal. NOTE: as a 
           side effect of this change, some of the uncommonly used settings (disablerollvariableexpansion and similar) will not function at this time. They were primarily for debugging 
           purposes and will return in a future update, but won't have an effect at this time.
         - Array Referencing: It is now possible to reference array items directly with the [@arrayName(index)] syntax. The first element of the array is index 0, etc.
         - Additional Roll Variable Suffix: You can now use ".Raw" suffix when referencing a roll variable to skip formatting the result as a roll. This shouldn't normally be necessary, 
           as roll formatting is only done on --+ and --* lines, but it is available, especially given the special note in the previous item.
         - Behavior Change: When generating tooltips (and only when generating tooltips) for roll variable display, the "~" character will be removed. This makes it easier to hide 
           what look like rolls from the chat server when referencing nested values (ie, [~[&shortSaveNameUpper]~]) when you just want the value of the variable in square brackets as 
           an explanation, since using [[&shortSaveNameUpper]] would look like an inline roll to the chat server.
         - Feature Update: Added support for new token properties added to Roll20 on 2021-06-03 (bar_location, compact_bar, light_sensitivity_multiplier, and night_vision_effect). 
           As with all token references, these are made with the "t-" prefix.

v 1.2.9  - Bug Fix - The "after" string function will now omit the specified separator from the value it returns.
         - Formatting - No functional change, but apparently at some point I hilighted the whole script in VSCode and hit tab a couple of times and indented everything. I fixed that :) 
           I've also begin adding more verbose comments throughout the code. That will continue as a work in progress.
         - Custom VFX for Point effects - The relatively new "--Vpoint" effect statement now supports custom FX.
         - New Distance Functions - Two new distance functions are available. "euclideanpixel" will return the raw pixel distance between two tokens (without dividing by 70). "euclideanlong"
           will return the unit distance, but divides the result by 70 AFTER calculating the distance to reduce rounding errors over very long ranges.
         - New String Functions - "replaceall" will replace all occurrences of the search string in the source text (replace replaces only the first occurrence). "trim" will remove spaces 
           from the beginning and end of the string.
         - Behavior Change - I have added a new setting value called "executionlimit", with a default of 30000. When processing a script, the number of lines executed is tracked. If that 
           number exceeds "executionlimit", ScriptCards will log an error message to the API console and abort execution of the script. If you need to execute more than 30000 lines of code, 
           just set the parameter higher for that particular script (i.e. : --#executionlimit|100000). The intent here is to prevent scripting logic errors from crashing the sandbox with an 
           infinite loop. My lightningbolt and fireball macros in VERY crowded areas don't hit the 30000 limit, so it should be good for most scripts. I can always up the default if there 
           are issues.
         - Deferred Meta Script Resolution - I mentioned this in 1.2.8a, but I've expanded on it a bit. As some more detail, when calling another API script with ScriptCards via 
           the --@ statement, it is now possible to include some meta script (SelectManager, Fetch) by inserting a deferral character into the meta call. 

v 1.2.8  - Added beginnings of deferral character support for including references to meta scripts inside a scriptcard.
         - New String Functions: replaceall and trim. replaceall works just like replace except it will replace all occurrences of the search string. Trim will remove spaces from the 
           beginning and end of the string.
         - New VFX Option: You can now spawn visual effects and arbitrary points with the --Vpoint| command. The parameters (separated by spaces) are X Y shape-color, and are measured in pixels. 
           If #activepage is set, the VFX will play on that page. Otherwise it will default to the player ribbon page. 
         - New Roll Parser Functions: As you may know, the ScriptCards roll parser works from left to right, always maintaining a current value and applying whatever comes next to the total. 
           This has allowed me to add some in-line functions to the roll parser. These are {ABS} - Absolute value, {CEIL} - Ceiling value (round up to the next whole number) {FLOOR} - Floor value 
           (round down to the next whole number), {ROUND} - Round value (round up if the decimal portion is greater than 0.5, otherwise round down), {NEGATE} - Multiply the value by negative one.

v 1.2.7  - Bug Fix: Corrected a bug introduced in 1.2.3 that would return "undefined" for token/character references ([*x:] syntax) that were 0 or null. (Thanks Will M.)
         - Data Statements: Support for BASIC-style read/data statements with the --d statement has been added. Data can be defined anywhere in your script with the --d!|element1;element2;element3;etc... 
           statement. Data is pre-processed into a structure that can be read with the --dVarName| command to read the next available data element into a string variable called "VarName". When attempting 
           to read past the last available element, a value of "EndOfDataError" will be returned. You can reset the data pointer to begin reading again from the beginning with --d<|. 
         - For...Next Loops: It is now possible to create For...Next loops in ScriptCards with the --% statement type. A loop is defined by starting off with --%LoopCounter|<start>;<end>;[step]
           The <start> and <end> values are required, while the [step] parameter is optional. If the step is omitted, it will be assumed to be 1. A string variable (in this case called "LoopCounter")
           will be created and will hold the current iteration value for the loop. The end of the loop is signified by --%|, which will increment the counter and check to see if the end point has been
           passed. If not, execution will return to the statement after the initial --% statement. Loops CAN be nested within each other, and the step value can be negative if you wish to run a loop 
           downwards. A conditional can end the current iteration of a loop with the % character, or break out of the loop entirely with %!. Finally, modifying the LoopCounter variable will not have any 
           impact on the loop or the number of iterations it runs. When execution returns to the top of the loop, the value of the variable will be reset to the current loop counter, which is 
           tracked internally.
         - Conditional Code Blocks: Added the ability to define blocks of code in association with conditional statements. This is similar to begin...end or curly braces in some languages, though a bit 
           more limited. As part of the true or false execution branch of a conditional, you can use the "[" character to begin a code block. If that execution path is taken, the code in the block will be 
           executed. Otherwise, the code in the block will be skipped. Blocks are completed with the --]| statement, and can optionally include an "else" block by using --]|[ as the block terminator. 
           At this time, blocks cannot be nested, and can only be created as part of a conditional (--[ is not a valid statement type)

v 1.2.3  - It is now possible to retrieve object properties from characters (as opposed to just attributes). Things like "controlledby" are now available. Unfortunately, notes, gmnotes, and bio are not
           available because of the way they have to be retrieved by the API.
         - Tag portions of a line are now trimmed, meaning trailing spaces should no longer cause them to be included at the end of variable names. Spaces inside variable names should still be fine. 
           Trimming was already happening on the content side of a statement.
         - ScriptCards will now replace inline rolls with their total results, so it should be possible to use a syntax like:
                  --=AC|[[ @{selected|armorclass} ]]
                  --+AC|[$AC]
           but note that ONLY the total result will be used by ScriptCards. It will not break the roll down into components like to normal roll parser does. This does allow quite a bit more flexibility
           for totally insane sheet calculations, however :) I still recommend using the internal roll parser for most things, but at least this will let you set variables for things like 3.5 AC.
         - New Functions: Added three new string functions: tolowercase, touppercase, and totitlecase. Each just takes the string to process as the only additional parameter and returns the result 
           to the string variable named in the tag portion of the statement. "tolowercase" and "touppercase" are fairly obvious. "totitlecase" capitalizes the first letter of each word in the string 
           (note that it doesn't account for things like not capitalizing "a" or "of", etc.)
         - Behavior Change: setting the sourcetoken or targettoken to a non-existent token or something that doesn't represent a character will now clear the internal cached character object as well. 
           This would be useful it you wanted to set a source/target for use with [*S:] or [*T:] notation but didn't want to display tokens in the emote section. Simply setting them to nothing 
           (--#sourcetoken|) before the end of the script will remove the references.

v 1.2.2  - Passing empty parameters should once again be supported.
         - You can also use either single or double quotes around parameters that contain a semicolon (I found some regex to parse CSV files and just changed the comma to a semicolon). 
         - You can now set an active page with the --#activepage|pageid setting. If you use "playerpage" as the page id, the current ribbon page will be used (so, --#activepage|playerpage) 
           or (see next item) --#activepage|[*C:playerpageid]
         - There are two new [*X:] attribute accessing options : [*C:attribute] will retrieve campaign-level attributes. Probably the only really useful one is "playerpageid", but they are all 
           available. [*P:attribute] will retrieve attributes on the activepage (which must be set beforehand). All of the UDL items should be available here, though I don't use UDL so I'm not 
           familiar with them.
         - Retrieving token GMNotes will (with something like [*T:t-gmnotes], or [*-sometokenid:t-gmnotes] will now run the result through decodeURIcomponent to get rid of the URI encoding as 
           return the notes as expected. Formatting like bold and italics, etc. should still work. 